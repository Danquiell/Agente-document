# -*- coding: utf-8 -*-
"""Teste Agente

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x2j1D16N_aRJHckP4SA7kS4nVXd0qhsD
"""

!pip install -q google-generativeai
!pip install -q google-generativeai pypdf python-docx pandas

import google.generativeai as genai
from google.colab import userdata
import textwrap
import os

import pypdf
import docx
import pandas as pd

def read_txt(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"Erro ao ler TXT '{file_path}': {e}")
        return None

def read_pdf(file_path):
    try:
        text = ""
        with open(file_path, 'rb') as f:
            reader = pypdf.PdfReader(f)
            for page_num in range(len(reader.pages)):
                text += reader.pages[page_num].extract_text() + "\n"
        return text
    except Exception as e:
        print(f"Erro ao ler PDF '{file_path}': {e}")
        return None

def read_docx(file_path):
    try:
        doc = docx.Document(file_path)
        full_text = []
        for para in doc.paragraphs:
            full_text.append(para.text)
        return '\n'.join(full_text)
    except Exception as e:
        print(f"Erro ao ler DOCX '{file_path}': {e}")
        return None

def read_csv(file_path):
    try:
        df = pd.read_csv(file_path)
        return df.to_string(index=False)
    except Exception as e:
        print(f"Erro ao ler CSV '{file_path}': {e}")
        return None

def carregar_documento_generico(caminho_documento):
    extensao = os.path.splitext(caminho_documento)[1].lower()

    if extensao == '.txt':
        return read_txt(caminho_documento)
    elif extensao == '.pdf':
        return read_pdf(caminho_documento)
    elif extensao == '.docx':
        return read_docx(caminho_documento)
    elif extensao == '.csv':
        return read_csv(caminho_documento)
    else:
        print(f"Formato de arquivo '{extensao}' não suportado.")
        return None

DOCUMENTO_PATH = '/content/oioi.csv'

documento_completo = carregar_documento_generico(DOCUMENTO_PATH)
if documento_completo is None:
    exit()

print(f"Documento '{DOCUMENTO_PATH}' carregado com sucesso. Tamanho: {len(documento_completo)} caracteres.")

try:
    GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')
    if not GOOGLE_API_KEY:
        raise ValueError("Chave API não encontrada nos Secrets do Colab.")
    genai.configure(api_key=GOOGLE_API_KEY)
    print("API do Gemini configurada com sucesso.")
except Exception as e:
    print(f"Erro ao carregar a chave API ou configurar: {e}")
    print("Por favor, verifique se sua chave API está configurada corretamente como um 'Secret' no Colab.")
    exit()

MODEL_NAME = 'gemini-1.5-flash-latest'
try:
    model = genai.GenerativeModel(MODEL_NAME)
    print(f"Modelo '{MODEL_NAME}' inicializado.")
except Exception as e:
    print(f"Erro ao inicializar o modelo '{MODEL_NAME}': {e}")
    print("Verifique o nome do modelo, a disponibilidade para sua chave API e região, e suas cotas.")
    exit()

SISTEMA_PROMPT = """
Você é um assistente de IA especializado em responder perguntas sobre um documento específico.
Sua principal diretriz é responder EXCLUSIVAMENTE com base nas informações contidas no texto fornecido.
Se a resposta para a pergunta não puder ser encontrada explicitamente no documento, você deve indicar claramente: "Não tenho informações sobre isso no documento fornecido."
Não utilize nenhum conhecimento externo que não esteja presente no documento.
Mantenha suas respostas concisas, factuais e diretas, sem adicionar opiniões pessoais, suposições ou inferências.
Seja neutro e evite qualquer linguagem que possa introduzir viés ou julgamento.

--- INÍCIO DO DOCUMENTO ---
{documento}
--- FIM DO DOCUMENTO ---

Agora, responda à seguinte pergunta:
"""

print("\n--- Agente de Perguntas e Respostas sobre Documentos ---")
print(f"Estou pronto para responder perguntas sobre o documento: '{DOCUMENTO_PATH}'.")
print("Digite sua pergunta ou 'sair' para encerrar.")

while True:
    pergunta_usuario = input("\nSua pergunta: ")
    if pergunta_usuario.lower() == 'sair':
        print("Encerrando o Agente. Até mais!")
        break

    prompt_completo_para_llm = SISTEMA_PROMPT.format(documento=documento_completo) + pergunta_usuario

    try:
        print("Processando sua pergunta com o LLM...")
        response = model.generate_content(prompt_completo_para_llm, request_options={"timeout": 120})
        resposta_llm = response.text

        print("\nResposta do Agente:")
        print(textwrap.fill(resposta_llm, width=80))

    except Exception as e:
        print(f"\nOcorreu um erro ao obter a resposta do modelo: {e}")
        if "429" in str(e):
            print("Cota Excedida")
        elif "404" in str(e):
            print(" não está disponível para sua chave API.")
        else:
            print("erro")

from google.colab import drive
drive.mount('/content/drive')